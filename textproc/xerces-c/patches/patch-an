$NetBSD: patch-an,v 1.4 2006/08/10 13:44:22 abs Exp $

--- util/RefArrayOf.c.orig	2005-09-07 16:55:50.000000000 +0100
+++ util/RefArrayOf.c
@@ -39,9 +39,9 @@ RefArrayOf<TElem>::RefArrayOf(const unsi
     , fArray(0)
     , fMemoryManager(manager)
 {
-    fArray = (TElem**) fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
-    for (unsigned int index = 0; index < fSize; index++)
-        fArray[index] = 0;
+    this->fArray = (TElem**) this->fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
+    for (unsigned int index = 0; index < this->fSize; index++)
+        this->fArray[index] = 0;
 }
 
 template <class TElem>
@@ -53,9 +53,9 @@ RefArrayOf<TElem>::RefArrayOf(TElem* val
     , fArray(0)
     , fMemoryManager(manager)
 {
-    fArray = (TElem**) fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
-    for (unsigned int index = 0; index < fSize; index++)
-        fArray[index] = values[index];
+    this->fArray = (TElem**) this->fMemoryManager->allocate(this->fSize * sizeof(TElem*));//new TElem*[fSize];
+    for (unsigned int index = 0; index < this->fSize; index++)
+        this->fArray[index] = values[index];
 }
 
 template <class TElem> RefArrayOf<TElem>::
@@ -65,14 +65,14 @@ RefArrayOf(const RefArrayOf<TElem>& sour
     , fArray(0)
     , fMemoryManager(source.fMemoryManager)
 {
-    fArray = (TElem**) fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
-    for (unsigned int index = 0; index < fSize; index++)
-        fArray[index] = source.fArray[index];
+    this->fArray = (TElem**) this->fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
+    for (unsigned int index = 0; index < this->fSize; index++)
+        this->fArray[index] = source.fArray[index];
 }
 
 template <class TElem> RefArrayOf<TElem>::~RefArrayOf()
 {
-    fMemoryManager->deallocate(fArray);//delete [] fArray;
+    this->fMemoryManager->deallocate(this->fArray);//delete [] fArray;
 }
 
 
@@ -84,7 +84,7 @@ operator[](const unsigned int index)
 {
     if (index >= fSize)
         ThrowXMLwithMemMgr(ArrayIndexOutOfBoundsException, XMLExcepts::Array_BadIndex, fMemoryManager);
-    return fArray[index];
+    return this->fArray[index];
 }
 
 template <class TElem> const TElem* RefArrayOf<TElem>::
@@ -92,7 +92,7 @@ operator[](const unsigned int index) con
 {
     if (index >= fSize)
         ThrowXMLwithMemMgr(ArrayIndexOutOfBoundsException, XMLExcepts::Array_BadIndex, fMemoryManager);
-    return fArray[index];
+    return this->fArray[index];
 }
 
 template <class TElem> RefArrayOf<TElem>& RefArrayOf<TElem>::
@@ -104,14 +104,14 @@ operator=(const RefArrayOf<TElem>& toAss
     // Reallocate if not the same size
     if (toAssign.fSize != fSize)
     {
-        fMemoryManager->deallocate(fArray);//delete [] fArray;
-        fSize = toAssign.fSize;
-        fArray = (TElem**) fMemoryManager->allocate(fSize * sizeof(TElem*));//new TElem*[fSize];
+        this->fMemoryManager->deallocate(this->fArray);//delete [] fArray;
+        this->fSize = toAssign.fSize;
+        this->fArray = (TElem**) this->fMemoryManager->allocate(this->fSize * sizeof(TElem*));//new TElem*[fSize];
     }
 
     // Copy over the source elements
     for (unsigned int index = 0; index < fSize; index++)
-        fArray[index] = toAssign.fArray[index];
+        this->fArray[index] = toAssign.fArray[index];
 
     return *this;
 }
@@ -182,16 +182,16 @@ template <class TElem> void RefArrayOf<T
     if (index >= fSize)
         ThrowXMLwithMemMgr(ArrayIndexOutOfBoundsException, XMLExcepts::Array_BadIndex, fMemoryManager);
 
-    delete fArray[index];
-    fArray[index] = 0;
+    delete this->fArray[index];
+    this->fArray[index] = 0;
 }
 
 template <class TElem> void RefArrayOf<TElem>::deleteAllElements()
 {
-    for (unsigned int index = 0; index < fSize; index++)
+    for (unsigned int index = 0; index < this->fSize; index++)
     {
         delete fArray[index];
-        fArray[index] = 0;
+        this->fArray[index] = 0;
     }
 }
 
@@ -204,7 +204,7 @@ template <class TElem> void RefArrayOf<T
         ThrowXMLwithMemMgr(IllegalArgumentException, XMLExcepts::Array_BadNewSize, fMemoryManager);
 
     // Allocate the new array
-    TElem** newArray = (TElem**) fMemoryManager->allocate
+    TElem** newArray = (TElem**) this->fMemoryManager->allocate
     (
         newSize * sizeof(TElem*)
     );//new TElem*[newSize];
@@ -212,15 +212,15 @@ template <class TElem> void RefArrayOf<T
     // Copy the existing values
     unsigned int index = 0;
     for (; index < fSize; index++)
-        newArray[index] = fArray[index];
+        newArray[index] = this->fArray[index];
 
     for (; index < newSize; index++)
         newArray[index] = 0;
 
     // Delete the old array and udpate our members
-    fMemoryManager->deallocate(fArray);//delete [] fArray;
-    fArray = newArray;
-    fSize = newSize;
+    this->fMemoryManager->deallocate(fArray);//delete [] fArray;
+    this->fArray = newArray;
+    this->fSize = newSize;
 }
 
 
@@ -241,7 +241,7 @@ RefArrayEnumerator(         RefArrayOf<T
 template <class TElem> RefArrayEnumerator<TElem>::~RefArrayEnumerator()
 {
     if (fAdopted)
-        delete fToEnum;
+        delete this->fToEnum;
 }
 
 
@@ -250,19 +250,19 @@ template <class TElem> RefArrayEnumerato
 // ---------------------------------------------------------------------------
 template <class TElem> bool RefArrayEnumerator<TElem>::hasMoreElements() const
 {
-    if (fCurIndex >= fToEnum->length())
+    if (fCurIndex >= this->fToEnum->length())
         return false;
     return true;
 }
 
 template <class TElem> TElem& RefArrayEnumerator<TElem>::nextElement()
 {
-    return *(*fToEnum)[fCurIndex++];
+    return *(*this->fToEnum)[this->fCurIndex++];
 }
 
 template <class TElem> void RefArrayEnumerator<TElem>::Reset()
 {
-    fCurIndex = 0;
+    this->fCurIndex = 0;
 }
 
 XERCES_CPP_NAMESPACE_END
