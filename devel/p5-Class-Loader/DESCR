Certain applications like to defer the decision to use a particular module
till runtime. This is possible in perl, and is a useful trick in situations
where the type of data is not known at compile time and the application
doesn't wish to pre-compile modules to handle all types of data it can work
with. Loading modules at runtime can also provide flexible interfaces for
perl modules. Modules can let the programmer decide what modules will be
used by it instead of hard-coding their names.

Class::Loader is an inheritable class that provides a method, _load(), to
load a module from disk and construct an object by calling its constructor.
It also provides a way to map modules names and associated metadata with
symbolic names that can be used in place of module names at _load().
