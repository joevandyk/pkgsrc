$NetBSD: patch-bb,v 1.2 2006/07/01 09:12:52 rillig Exp $

SunPro cannot handle "extern inline" functions.

It is more portable to use explicit assignment instead of {foo=bar},
especially since the initializers are not constant.

--- src/common-analyze.c.orig	2003-09-27 23:35:48.000000000 +0200
+++ src/common-analyze.c	2006-07-01 10:32:58.000000000 +0200
@@ -36,11 +36,11 @@ effect global_effect = NULL; /* Effect c
 				       of every function */
 effect global_env = NULL;    /* Locations bound in global scope */
 
-inline void mk_effect_leq_global_env(effect e) 
+void mk_effect_leq_global_env(effect e) 
 { 
   mkleq_effect(e, global_env); 
 }
-inline void mk_effect_leq_global_effect(effect e) 
+void mk_effect_leq_global_effect(effect e) 
 { 
   mkleq_effect(e, global_effect); 
 }
@@ -492,21 +492,31 @@ void mkNonConst_aggregate(location loc, 
  *                                                                        *
  **************************************************************************/
 
-inline einfo mkeinfo(qtype qt, effect eff, bool ismalloc)
+einfo mkeinfo(qtype qt, effect eff, bool ismalloc)
 {
-  struct einfo result = {qt: qt, eff: eff, ismalloc: ismalloc};
+  struct einfo result;
+
+  result.qt = qt;
+  result.eff = eff;
+  result.ismalloc = ismalloc;
   return result;
 }
 
-inline sinfo mksinfo(effect eff)
+sinfo mksinfo(effect eff)
 {
-  struct sinfo result = {eff: eff};
+  struct sinfo result;
+
+  result.eff = eff;
   return result;
 }
 
-inline dinfo mkdinfo(effect eff, effect alocs)
+dinfo mkdinfo(effect eff, effect alocs)
 {
-  struct dinfo result = {eff: eff, alocs: alocs};
+  struct dinfo result;
+
+  result.eff = eff;
+  result.alocs = alocs;
+  result.drinfolist = NULL;
   return result;
 }
 
@@ -550,7 +560,7 @@ struct operator operators[] =
     {0, 0, NULL}};
 
 /* Given an operator function name, return its signature */
-inline operator find_op_name(const char *name)
+operator find_op_name(const char *name)
 {
   int i;
 
