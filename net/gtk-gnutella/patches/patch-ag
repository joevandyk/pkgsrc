$NetBSD: patch-ag,v 1.2 2007/10/14 08:32:19 adam Exp $

--- src/lib/prop.c.orig	2007-07-07 06:21:38.000000000 +0200
+++ src/lib/prop.c
@@ -466,7 +466,7 @@ prop_get_def(prop_set_t *ps, property_t 
 			sizeof buf->data.ip.value * PROP(ps,p).vector_size);
 		break;
 
-	case PROP_TYPE_STRING:
+	case gg_PROP_TYPE_STRING:
 		buf->data.string.def	= g_new(gchar*, 1);
 		*buf->data.string.def   = g_strdup(*PROP(ps,p).data.string.def);
 		buf->data.string.value  = g_new(gchar*, 1);
@@ -521,7 +521,7 @@ prop_free_def(prop_def_t *d)
 	case PROP_TYPE_IP:
 		G_FREE_NULL(d->data.ip.value);
 		break;
-	case PROP_TYPE_STRING:
+	case gg_PROP_TYPE_STRING:
 		G_FREE_NULL(*d->data.string.value);
 		G_FREE_NULL(*d->data.string.def);
 		G_FREE_NULL(d->data.string.value);
@@ -1198,12 +1198,12 @@ prop_set_string(prop_set_t *ps, property
 
 	if (!prop_in_range(ps, prop))
 		g_error("prop_get_gchar: unknown property %d", prop);
-	if (PROP(ps,prop).type != PROP_TYPE_STRING)
+	if (PROP(ps,prop).type != gg_PROP_TYPE_STRING)
 		g_error("Type mismatch getting value for [%s] of type"
 			" %s when %s was expected",
 			PROP(ps,prop).name,
 			prop_type_str[PROP(ps,prop).type].name,
-			prop_type_str[PROP_TYPE_STRING].name);
+			prop_type_str[gg_PROP_TYPE_STRING].name);
 
 	prop_assert(ps, prop, PROP(ps,prop).vector_size == 1);
 
@@ -1260,12 +1260,12 @@ prop_get_string(prop_set_t *ps, property
 
 	if (!prop_in_range(ps, prop))
 		g_error("prop_get_gchar: unknown property %d", prop);
-	if (PROP(ps,prop).type != PROP_TYPE_STRING)
+	if (PROP(ps,prop).type != gg_PROP_TYPE_STRING)
 		g_error("Type mismatch getting value for [%s] of type"
 			" %s when %s was expected",
 			PROP(ps,prop).name,
 			prop_type_str[PROP(ps,prop).type].name,
-			prop_type_str[PROP_TYPE_STRING].name);
+			prop_type_str[gg_PROP_TYPE_STRING].name);
 
 	s = *PROP(ps,prop).data.string.value;
 
@@ -1375,7 +1375,7 @@ prop_to_string(prop_set_t *ps, property_
 			timestamp_to_string_buf(val, s, sizeof s);
 		}
 		break;
-	case PROP_TYPE_STRING:
+	case gg_PROP_TYPE_STRING:
 		{
 			gchar *buf = prop_get_string(ps, prop, NULL, 0);
 
@@ -1452,7 +1452,7 @@ prop_default_to_string(prop_set_t *ps, p
 	case PROP_TYPE_TIMESTAMP:
 		uint64_to_string_buf(p->data.timestamp.def[0], s, sizeof s);
 		break;
-	case PROP_TYPE_STRING:
+	case gg_PROP_TYPE_STRING:
 		g_strlcpy(s, *p->data.string.def ? *p->data.string.def : "", sizeof s);
 		break;
 	case PROP_TYPE_IP:
@@ -1725,7 +1725,7 @@ prop_save_to_file(prop_set_t *ps, const 
 			val = g_strjoinv(",", vbuf);
 			quotes = TRUE;
 			break;
-		case PROP_TYPE_STRING:
+		case gg_PROP_TYPE_STRING:
 			val = g_strdup(*p->data.string.value);
 			if (
 				(val == NULL && *p->data.string.def != NULL) ||
@@ -1872,7 +1872,7 @@ prop_set_from_string(prop_set_t *ps, pro
 			p->vector_size, vecbuf.timestamp);
 		stub->timestamp.set(prop, vecbuf.timestamp, 0, 0);
 		break;
-	case PROP_TYPE_STRING:
+	case gg_PROP_TYPE_STRING:
 		stub->string.set(prop, val);
 		break;
 	case PROP_TYPE_IP:
