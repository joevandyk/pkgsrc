$NetBSD: patch-ak,v 1.6 2007/07/20 00:09:23 gdt Exp $

Avoid lots of errors like this on NetBSD/alpha:
test-conversion.c:32: warning: long long int format, scm_t_intmax arg (arg 4)
which in turn causes the build to fail since guile uses -Wall -Werror.

--- test-suite/standalone/test-conversion.c.orig	2007-05-09 16:22:03.000000000 -0400
+++ test-suite/standalone/test-conversion.c
@@ -29,7 +29,7 @@ test_1 (const char *str, scm_t_intmax mi
   if (r != result)
     {
       fprintf (stderr, "fail: scm_is_signed_integer (%s, %Ld, %Ld) == %d\n",
-	       str, min, max, result);
+	       str, (long long) min, (long long) max, result);
       exit (1);
     }
 }
@@ -114,7 +114,7 @@ test_2 (const char *str, scm_t_uintmax m
   if (r != result)
     {
       fprintf (stderr, "fail: scm_is_unsigned_integer (%s, %Lu, %Lu) == %d\n",
-	       str, min, max, result);
+	       str, (unsigned long long) min, (unsigned long long) max, result);
       exit (1);
     }
 }
@@ -234,7 +234,7 @@ test_3 (const char *str, scm_t_intmax mi
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) -> out of range\n",
-		   str, min, max);
+		   str, (long long) min, (long long) max);
 	  exit (1);
 	}
     }
@@ -246,7 +246,7 @@ test_3 (const char *str, scm_t_intmax mi
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) -> wrong type\n",
-		   str, min, max);
+		   str, (long long) min, (long long) max);
 	  exit (1);
 	}
     }
@@ -259,7 +259,7 @@ test_3 (const char *str, scm_t_intmax mi
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) = %Ld\n",
-		   str, min, max, result);
+		   str, (long long) min, (long long) max, (long long) result);
 	  exit (1);
 	}
     }
@@ -366,7 +366,7 @@ test_4 (const char *str, scm_t_uintmax m
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) -> out of range\n",
-		   str, min, max);
+		   str, (unsigned long long) min, (unsigned long long) max);
 	  exit (1);
 	}
     }
@@ -378,7 +378,7 @@ test_4 (const char *str, scm_t_uintmax m
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) -> wrong type\n",
-		   str, min, max);
+		   str, (unsigned long long) min, (unsigned long long) max);
 	  exit (1);
 	}
     }
@@ -391,7 +391,7 @@ test_4 (const char *str, scm_t_uintmax m
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) == %Lu\n",
-		   str, min, max, result);
+		   str, (unsigned long long) min, (unsigned long long) max, (unsigned long long) result);
 	  exit (1);
 	}
     }
@@ -447,7 +447,7 @@ test_5 (scm_t_intmax val, const char *re
   if (scm_is_false (scm_equal_p (scm_from_signed_integer (val), res)))
     {
       fprintf (stderr, "fail: scm_from_signed_integer (%Ld) == %s\n",
-	       val, result);
+	       (long long) val, result);
       exit (1);
     }
 }
@@ -479,7 +479,7 @@ test_6 (scm_t_uintmax val, const char *r
   if (scm_is_false (scm_equal_p (scm_from_unsigned_integer (val), res)))
     {
       fprintf (stderr, "fail: scm_from_unsigned_integer (%Lu) == %s\n",
-	       val, result);
+	       (unsigned long long) val, result);
       exit (1);
     }
 }
@@ -507,7 +507,7 @@ test_7s (SCM n, scm_t_intmax c_n, const 
 
   if (scm_is_false (scm_equal_p (n, r)))
     {
-      fprintf (stderr, "fail: %s (%Ld) == %s\n", func, c_n, result);
+      fprintf (stderr, "fail: %s (%Ld) == %s\n", func, (long long) c_n, result);
       exit (1);
     }
 }
@@ -521,7 +521,7 @@ test_7u (SCM n, scm_t_uintmax c_n, const
 
   if (scm_is_false (scm_equal_p (n, r)))
     {
-      fprintf (stderr, "fail: %s (%Lu) == %s\n", func, c_n, result);
+      fprintf (stderr, "fail: %s (%Lu) == %s\n", func, (unsigned long long) c_n, result);
       exit (1);
     }
 }
@@ -580,7 +580,7 @@ test_8s (const char *str, scm_t_intmax (
 	  || data.result != result)
 	{
 	  fprintf (stderr,
-		   "fail: %s (%s) = %Ld\n", func_name, str, result);
+		   "fail: %s (%s) = %Ld\n", func_name, str, (long long) result);
 	  exit (1);
 	}
     }
@@ -638,7 +638,7 @@ test_8u (const char *str, scm_t_uintmax 
 	  || data.result != result)
 	{
 	  fprintf (stderr,
-		   "fail: %s (%s) = %Ld\n", func_name, str, result);
+		   "fail: %s (%s) = %Ld\n", func_name, str, (long long) result);
 	  exit (1);
 	}
     }
